Q:What is Abstraction?
Abstraction is an OOPS concept to construct the structure of the real world objects. 
During this construction only the general states and behaviors are taken 
and more specific states and behaviors are left aside for the implementers.

Q:What actually happens with the constructor is that the runtime uses type data 
generated by the compiler to determine how much space is needed 
to store an object instance in memory, be it on the stack or on the heap.

This space includes all members variables and the vtbl. 
After this space is allocated, the constructor is called as an internal part 
of the instantiation and initialization process to initialize the contents of the fields.

Then, when the constructor exits, the runtime returns the newly-created instance. 
So the reason the constructor doesn't return a value is because it's not called directly 
by your code, it's called by the memory allocation and object initialization code in the runtime.

Its return value (if it actually has one when compiled down to machine code) is opaque to the user - 
therefore, you can't specify it.


Abstract Methods:
If you want a class to contain a particular method but you want the 
actual implementation of that method to be determined by child classes, 
you can declare the method in the parent class as an abstract.

abstract keyword is used to declare the method as abstract.
You have to place the abstract keyword before the method name in the method declaration.
An abstract method contains a method signature, but no method body.

Instead of curly braces({}), an abstract method will have a semoi colon (;) at the end.
Following is an example of the abstract method.

Example
public abstract class Employee {
   private String name;
   private String address;
   private int number;
   
   public abstract double computePay();
   // Remainder of class definition
}
Declaring a method as abstract has two consequences −

The class containing it must be declared as abstract.

Any class inheriting the current class must either override the abstract method or declare itself as abstract.

Note − Eventually, a descendant class has to implement the abstract method; otherwise, you would have a hierarchy of abstract classes that cannot be instantiated.

Suppose Salary class inherits the Employee class, then it should implement the computePay() method as shown below −

/* File name : Salary.java */
public class Salary extends Employee {
   private double salary;   // Annual salary
  
   public double computePay() {
      System.out.println("Computing salary pay for " + getName());
      return salary/52;
   }
   // Remainder of class definition
}

-----------------xxxxxxxxxxxxxxxx----------------------

https://www.tutorialspoint.com/java/java_abstraction.htm








